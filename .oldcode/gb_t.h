
#ifndef GB_T
#define GB_T

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>






// REGISTER DEFINITIONS
// PORT MODE REGISTER
#define P1      0xFF00
#define SB      0xFF01
#define SC      0xFF02
#define DIV     0xFF04
#define TIMA    0xFF05
#define TMA     0xFF06
#define TAC     0xFF07

// IRQ REGISTERS
#define I_FLAG   0xFF0F
#define I_ENABLE 0xFFFF
// IRQ MASKS
#define IRQ_VBLANK  0
#define IRQ_LCDC    1
#define IRQ_TIMER   2
#define IRQ_SERIAL  3
#define IRQ_IO      4
// IRQ MEM SPACES
// VBLANK 0x0040 LCDC 0x0048 TImoer 0x0050  SErail 0x0058  IO 0x0060 //falling priority

// LCD REGISTER 
#define LCDC    0xFF40
#define STAT    0xFF41
#define SCY     0xFF42
#define SCX     0xFF43
#define LY      0xFF44
#define LYC     0xFF45
#define DMA     0xFF46  
#define BGP     0xFF47
#define OBP0    0xFF48
#define OPB1    0xFF49
#define WY      0xFF4A
#define WX      0xFF4B

// HELPER




typedef struct mem_t{
    uint8_t boot_rom[0x100];

    union {
        uint8_t data [0x10000];
        struct {
            uint8_t  rom[2][0x4000];
            uint8_t vram[0x2000];
            uint8_t eram[0x2000];
            uint8_t  ram[0x2000];
            uint8_t ram_[0x1E00];
            uint8_t  oam[0xA0];
            uint8_t empty[0x60];
            uint8_t  io[0x40];
            uint8_t ppu[0x40];
            uint8_t hram[0x80];
            uint8_t irq[1];
        };
    };
}mem_t;



typedef union flags_u{
    uint8_t R;
        struct{
            uint8_t _n :4;
            uint8_t CY :1;
            uint8_t HC :1;
            uint8_t N :1;
            uint8_t Z :1;
        };
}flags_u;



typedef struct reg_t{
    union {
        uint16_t BC;
        struct{
            uint8_t C;
            uint8_t B;
        };
    };
    union {
        uint16_t DE;
        struct{
            uint8_t E;
            uint8_t D;
        };
    };
    union {
        uint16_t HL;
        struct{
            uint8_t L;
            uint8_t H;
        };
    };
    union {
        uint16_t AF;
        struct{
            uint8_t F;
            uint8_t A;
        };
    };
    uint16_t SP;
    uint16_t PC;   

    flags_u flags;
}reg_t;


typedef struct cpu_t{
    reg_t reg;
    mem_t mem;
    uint8_t irq_enable;
    uint32_t cycle;
} cpu_t;




/*typedef enum regOrder_e{
    REG_B,  REG_C,
    REG_D,  REG_E,
    REG_H,  REG_L,
    REG_HL, REG_A,
}regOrder_e;*/



static uint8_t BIOS[0x100] = {
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
	0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50 };

#endif


